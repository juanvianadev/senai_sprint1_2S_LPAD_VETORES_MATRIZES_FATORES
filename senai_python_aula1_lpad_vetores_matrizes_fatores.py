# -*- coding: utf-8 -*-
"""senai_python_aula1_LPAD_VETORES_MATRIZES_FATORES.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ww1mLXTPedIA8aTUaVvCkFmACzoeVo_W
"""

import numpy as np
import math as mt

vetor = np.array([1, 2, 3, 4, 5, 6, 7, 8])
print(vetor)

vetor[2]

modulo = np.linalg.norm(vetor)
print(modulo)

vetor1 = ([-55, 12])
vetor2 = ([11, -23, 4])

print(vetor1)
print(vetor2)

modulo1 = np.linalg.norm(vetor1)
print(modulo1)

modulo2 = np.linalg.norm(vetor2)
print(modulo2)

u = np.array([-3, -5])
v = np.array([6, 27])

soma = u + v
print('A soma dos vetores: ', soma)

subtracao = u - v
print('A subtração dos vetores: ', subtracao)

multiplicacao = u * 9
print('A multiplicação do vetor: ', multiplicacao)

multiplicacaoFracao = (1/3) * v
print('A multiplicação do vetor: ', multiplicacaoFracao)

u1 = np.array([2, 5/3])
v1 = np.array([-1, 7])

soma = u1 + v1
print('A soma dos vetores: ', soma)

subtracao = u1 - v1
print('A subtração dos vetores: ', subtracao)

multiplicacao = u1 * 3
print('A multiplicação do vetor: ', multiplicacao)

multiplicacaoFracao = (1/5) * v1
print('A multiplicação do vetor: ', multiplicacaoFracao)

u2 = np.array([-2, 3])
v2 = np.array([7, 4])

def R(u2, v2):
  cos135 = 2.36
  somaU = mt.sqrt(sum(u2**2))
  somaV = mt.sqrt(sum(v2**2))
  resultado = somaU**2 + somaV**2 + 2 * somaU * somaV * np.cos(cos135)
  raizResultado = mt.sqrt(resultado)
  print(raizResultado)
  return raizResultado

R(u2, v2)

u3 = np.array([5, 4, 2])
v3 = np.array([1, 3, -12])

resultado3 = u3 @ v3
print(resultado3)

matriz = np.array([[1, 2, 3], [4, 5, 6]])
print(matriz)
print(matriz.shape)

matriz[1,2]

A = np.random.rand(2, 2)
print("Matriz A: ", A)

B = np.random.rand(3, 4)
print("Matriz B: ", B)

I = np.identity(3)
print(I)

A1 = np.random.rand(3, 2)

A1_transpose = np.transpose(A1)

print(A1)
print(A1_transpose)

A2 = np.array([[1, -3, 5], [8, 0, 3]])
B2 = np.array([[2, 4], [6, 10], [1, 5]])

print(A2 @ B2)

A3 = np.array([[1, 9, 5], [3, 7, 8], [10, 4, 2]])

detA3 = np.linalg.det(A3)
print(detA3)

A4 = np.array([[2, 5, -3], [1, 4, 7], [-2, 0, 6]])
B4 = np.array([[mt.sqrt(2), 2, 1], [-1, mt.sqrt(3), 7], [3, 2, mt.sqrt(6)]])

detA4 = np.linalg.det(A4)
detB4 = np.linalg.det(B4)

print(detA4)
print(detB4)